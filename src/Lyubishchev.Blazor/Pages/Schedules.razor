@page "/schedules"
@attribute [Authorize(LyubishchevPermissions.TimePeriods.Default)]
@using Lyubishchev.Permissions
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Application.Dtos
@using Lyubishchev.TimePeriods;
@using Lyubishchev.Localization;
@using Microsoft.Extensions.Localization
@using Volo.Abp.BlazoriseUI
@*@using Volo.Abp.AspNetCore.Components.Web*@
@inject IStringLocalizer<LyubishchevResource> L
@inject AbpBlazorMessageLocalizerHelper<LyubishchevResource> LH
@*@inject DialogService DialogService*@
@inherits AbpCrudPageBase<Lyubishchev.ITimePeriodAppService,TimePeriodDto, Guid,PagedAndSortedResultRequestDto, CreateUpdateTimePeriodDto>


<RadzenScheduler @ref="Scheduler"
                 style="height: 800px;"
                 TItem="TimePeriodDto"
                 Data="Entities"
                 LoadData="@OnLoadData"
                 StartProperty="@nameof(TimePeriodDto.Start)"
                 EndProperty="@nameof(TimePeriodDto.End)"
                 TextProperty="@nameof(TimePeriodDto.Name)"
                 SelectedIndex="0"
                 SlotRender=@OnSlotRender
                 SlotSelect=@OnSlotSelect
                 AppointmentSelect=@OnAppointmentSelect>
    @* SelectedIndex -> first display is day/week/month*@
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>

<Modal @ref="@CreateModal">
    @*    <ModalBackdrop />*@
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["TimePeriod_NewTimePeriod"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["TimePeriod_Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation Validator="ValidationRule.IsSelected">
                        <Field>
                            <FieldLabel>@L["TimePeriodCategory"]</FieldLabel>
                            <Select TValue="Guid" @bind-SelectedValue="@NewEntity.CategoryId">
                                <SelectItem TValue="Guid" Value="Guid.Empty" Disabled="true"> @L["PickTimePeriodCategory"]</SelectItem>
                                @foreach (var category in timePeriodCategoryList)
                                {
                                    <SelectItem TValue="Guid" Value="@category.Id">
                                        @category.Name
                                    </SelectItem>
                                }

                            </Select>
                        </Field>
                    </Validation>

                    <Field>
                        <FieldLabel>@L["TimePeriod_Date"]</FieldLabel>
                        <DateEdit TValue="DateTime" Placeholder="@DateTime.Now.ToString("m")" @bind-Date="NewEntity.Start" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["TimePeriod_Start"]</FieldLabel>
                        <TimeEdit TValue="DateTime" Placeholder="@DateTime.Now.ToString("t")" @bind-Time="NewEntity.Start" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["TimePeriod_End"]</FieldLabel>
                        <TimeEdit TValue="DateTime" Placeholder="@DateTime.Now.AddHours(1).ToString("t")" @bind-Time="NewEntity.End" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["TimePeriod_Note"]</FieldLabel>
                        <MemoEdit Rows="5" @bind-Text="NewEntity.Note" />

                        @*<Markdown>
                        <Toolbar>

                        </Toolbar>
                        </Markdown>*@

                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@Blazorise.ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="@EditModal">
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["TimePeriod_Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["TimePeriodCategory"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@EditingEntity.CategoryId">
                            @foreach (var category in timePeriodCategoryList)
                            {
                                <SelectItem TValue="Guid" Value="@category.Id">
                                    @category.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>@L["TimePeriod_Date"]</FieldLabel>
                        <DateEdit TValue="DateTime" Placeholder="@DateTime.Now.ToString("m")" @bind-Date="NewEntity.Start" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["TimePeriod_Start"]</FieldLabel>
                        <TimeEdit TValue="DateTime" @bind-Time="EditingEntity.Start" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["TimePeriod_End"]</FieldLabel>
                        <TimeEdit TValue="DateTime" @bind-Time="EditingEntity.End" />
                    </Field>
                    <Field>
                        <FieldLabel>@L["TimePeriod_Note"]</FieldLabel>
                        <MemoEdit Rows="5" @bind-Text="EditingEntity.Note" />
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@Blazorise.ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {

    private RadzenScheduler<TimePeriodDto> Scheduler { get; set; }
    private IReadOnlyList<TimePeriodCategoryLookupDto> timePeriodCategoryList = Array.Empty<TimePeriodCategoryLookupDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        timePeriodCategoryList = (await AppService.GetTimePeriodCategoryLookupAsync()).Items;
    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        await GetEntitiesAsync();
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-19)
        if ((args.View.Text == "Week" || args.View.Text == "Day")
        && args.Start.DayOfWeek != DayOfWeek.Saturday && args.Start.DayOfWeek != DayOfWeek.Sunday
        && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        await OpenCreateModalAsync();
        await Scheduler.Reload();
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<TimePeriodDto> args)
    {
        await OpenEditModalAsync(args.Data);
        await Scheduler.Reload();
    }
    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<TimePeriodDto> args)
    {

    }
}
